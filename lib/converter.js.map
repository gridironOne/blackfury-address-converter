{"version":3,"file":"converter.js","sources":["../src/converter.ts"],"sourcesContent":["import {\n  isValidChecksumAddress,\n  stripHexPrefix,\n  toChecksumAddress\n} from 'crypto-addr-codec';\n\nimport {\n  decode,\n  encode,\n  fromWords,\n  toWords,\n} from 'bech32';\n\nfunction makeChecksummedHexEncoder(chainId?: number) {\n  return (data: Buffer) => toChecksumAddress(data.toString('hex'), chainId || null);\n}\n\nfunction makeChecksummedHexDecoder(chainId?: number) {\n  return (data: string) => {\n    const stripped = stripHexPrefix(data);\n    if (\n      !isValidChecksumAddress(data, chainId || null) &&\n      stripped !== stripped.toLowerCase() &&\n      stripped !== stripped.toUpperCase()\n    ) {\n      throw Error('Invalid address checksum');\n    }\n    return Buffer.from(stripHexPrefix(data), 'hex');\n  };\n}\n\nconst hexChecksumChain = (name: string, chainId?: number) => ({\n  decoder: makeChecksummedHexDecoder(chainId),\n  encoder: makeChecksummedHexEncoder(chainId),\n  name,\n});\n\nexport const ETH = hexChecksumChain('ETH');\n\nfunction makeBech32Encoder(prefix: string) {\n  return (data: Buffer) => encode(prefix, toWords(data));\n}\n\nfunction makeBech32Decoder(currentPrefix: string) {\n  return (data: string) => {\n    const { prefix, words } = decode(data);\n    if (prefix !== currentPrefix) {\n      throw Error('Unrecognised address format');\n    }\n    return Buffer.from(fromWords(words));\n  };\n}\n\n\nconst bech32Chain = (name: string, prefix: string) => ({\n  decoder: makeBech32Decoder(prefix),\n  encoder: makeBech32Encoder(prefix),\n  name,\n});\n\nexport const BLACKV = bech32Chain('blackvaloper', 'blackvaloper');\n\nexport const ethToBlackfuryv = (ethAddress:string) => {\n  let data = ETH.decoder(ethAddress);\n  return BLACKV.encoder(data);\n}\n\nexport const blackvToEth = (blackAddress: string) => {\n  let data = BLACKV.decoder(blackAddress);\n  return ETH.encoder(data);\n};\n\n\nexport const BLACK = bech32Chain('black', 'black');\n\nexport const ethToBlackfury = (ethAddress:string) => {\n  let data = ETH.decoder(ethAddress);\n  return BLACK.encoder(data);\n}\n\nexport const blackfuryToEth = (blackAddress: string) => {\n  let data = BLACK.decoder(blackAddress);\n  return ETH.encoder(data);\n};\n"],"names":["ETH","decoder","data","stripped","stripHexPrefix","isValidChecksumAddress","toLowerCase","toUpperCase","Error","Buffer","from","encoder","toChecksumAddress","toString","name","makeBech32Encoder","prefix","encode","toWords","bech32Chain","currentPrefix","words","decode","fromWords","BLACKV","BLACK","blackAddress","ethAddress"],"mappings":"uDA+BA,MAMaA,GALXC,QAdQC,IACN,MAAMC,EAAWC,iBAAeF,GAChC,IACGG,yBAAuBH,EAAiB,OACzCC,IAAaA,EAASG,eACtBH,IAAaA,EAASI,cAEtB,MAAMC,MAAM,4BAEd,OAAOC,OAAOC,KAAKN,iBAAeF,GAAO,QAM3CS,QAnBQT,GAAiBU,oBAAkBV,EAAKW,SAAS,OAAmB,MAoB5EC,KAGkC,OAEpC,SAASC,EAAkBC,GACzB,OAAQd,GAAiBe,SAAOD,EAAQE,UAAQhB,IAclD,MAAMiB,EAAc,CAACL,EAAcE,YACjCf,SAZyBmB,EAYEJ,EAXnBd,IACN,MAAMc,OAAEA,EAAFK,MAAUA,GAAUC,SAAOpB,GACjC,GAAIc,IAAWI,EACb,MAAMZ,MAAM,+BAEd,OAAOC,OAAOC,KAAKa,YAAUF,MAO/BV,QAASI,EAAkBC,GAC3BF,KAAAA,GAdF,IAA2BM,GAiBdI,EAASL,EAAY,eAAgB,gBAarCM,EAAQN,EAAY,QAAS,2EAOfO,IACzB,IAAIxB,EAAOuB,EAAMxB,QAAQyB,GACzB,OAAO1B,EAAIW,QAAQT,wBAfOwB,IAC1B,IAAIxB,EAAOsB,EAAOvB,QAAQyB,GAC1B,OAAO1B,EAAIW,QAAQT,2BAMUyB,IAC7B,IAAIzB,EAAOF,EAAIC,QAAQ0B,GACvB,OAAOF,EAAMd,QAAQT,4BAfSyB,IAC9B,IAAIzB,EAAOF,EAAIC,QAAQ0B,GACvB,OAAOH,EAAOb,QAAQT"}